import { defineStore } from "pinia";
import axios from "axios";
import { useChatStore } from "@/stores/chat";

export const useApplicationsStore = defineStore("applications", {
  state: () => ({
    myApplications: [],
    jobApplications: {},
    loading: false,
    error: null,
  }),

  getters: {
    getMyApplications: (state) => state.myApplications,
    getJobApplications: (state) => (jobId) =>
      state.jobApplications[jobId] || [],
    isLoading: (state) => state.loading,
  },

  actions: {
    async fetchMyApplications() {
      this.loading = true;
      this.error = null;
      try {
        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤");
        const response = await axios.get("/api/jobs/applications/my/", {
          timeout: 10000,
        });

        if (!response.data) {
          console.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –æ—Ç–∫–ª–∏–∫–æ–≤");
          return [];
        }

        console.log(
          `–ü–æ–ª—É—á–µ–Ω–æ ${
            Array.isArray(response.data) ? response.data.length : "–Ω–µ –º–∞—Å—Å–∏–≤"
          } –æ—Ç–∫–ª–∏–∫–æ–≤`
        );
        this.myApplications = response.data;
        return this.myApplications;
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤:", error);

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        if (error.response) {
          if (error.response.status === 404) {
            console.error("–≠–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            this.error =
              "API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—ç–∫–µ–Ω–¥–µ.";
          } else {
            this.error = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}`;
          }
        } else if (error.request) {
          this.error = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º";
        } else {
          this.error = error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏";
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ UI
        return [];
      } finally {
        this.loading = false;
      }
    },

    async fetchJobApplications(jobId) {
      this.loading = true;
      this.error = null;
      try {
        console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
        const response = await axios.get(`/api/jobs/${jobId}/applications/`, {
          timeout: 10000,
        });

        if (!response.data) {
          console.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é");
          return [];
        }

        console.log(
          `–ü–æ–ª—É—á–µ–Ω–æ ${
            Array.isArray(response.data) ? response.data.length : "–Ω–µ –º–∞—Å—Å–∏–≤"
          } –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`
        );
        this.jobApplications[jobId] = response.data;
        return this.jobApplications[jobId];
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}:`,
          error
        );

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        if (error.response) {
          if (error.response.status === 404) {
            console.error("–≠–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            this.error =
              "API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—ç–∫–µ–Ω–¥–µ.";
          } else {
            this.error = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}`;
          }
        } else if (error.request) {
          this.error = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º";
        } else {
          this.error =
            error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é";
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ UI
        this.jobApplications[jobId] = [];
        return [];
      } finally {
        this.loading = false;
      }
    },

    async applyForJob(jobId, data) {
      this.loading = true;
      this.error = null;
      try {
        console.log(`–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ${jobId} —Å –¥–∞–Ω–Ω—ã–º–∏:`, data);

        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –∑–∞—è–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
        if (import.meta.env.DEV) {
          console.log(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –≤—ã–∑–æ–≤–∞ API"
          );

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          alert(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –°–æ–∑–¥–∞–Ω–∏–µ mock –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ " + jobId
          );

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          let userData = {};
          try {
            const userJson = localStorage.getItem("user");
            if (userJson) {
              const authUser = JSON.parse(userJson);
              userData = {
                user_id: authUser.id || Date.now(),
                username: authUser.username || "user",
                role: authUser.profile?.role || "jobseeker",
              };
            } else {
              userData = {
                user_id: Date.now(),
                username: "testuser",
                role: "jobseeker",
              };
            }
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
            userData = {
              user_id: Date.now(),
              username: "testuser",
              role: "jobseeker",
            };
          }

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
          let resumeInfo = "";
          let resumeLink = "";
          try {
            const resumes = JSON.parse(localStorage.getItem("resumes") || "[]");
            console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—é–º–µ:", JSON.stringify(resumes));

            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–∑—é–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (resumes && resumes.length > 0) {
              const selectedResume = resumes[0];
              console.log(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ:",
                JSON.stringify(selectedResume)
              );

              const resumeTitle =
                selectedResume.title ||
                selectedResume.name ||
                "Frontend frerfe";
              const resumeIdToUse = selectedResume.id || 1;

              // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
              let skills =
                selectedResume.skills && selectedResume.skills.length > 0
                  ? selectedResume.skills.join(", ")
                  : "JavaScript, Vue.js, Node.js";

              let experience = selectedResume.experience || "5+ –ª–µ—Ç";
              let education = selectedResume.education || "–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ";

              resumeInfo = `\n\n–†–µ–∑—é–º–µ: ${resumeTitle}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${experience}\n–ù–∞–≤—ã–∫–∏: ${skills}\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${education}`;
              resumeLink = `\n\nüëâ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ: /resumes/${resumeIdToUse}`;

              console.log("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—é–º–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:", resumeInfo);
            }
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ:", err);
          }

          // –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –∑–∞—è–≤–∫–∏
          const mockApplication = {
            id: Date.now(),
            job: jobId,
            user_id: userData.user_id,
            username: userData.username,
            status: "pending",
            created_at: new Date().toISOString(),
            cover_letter: data.cover_letter || "",
            message: data.message || "",
            expected_salary: data.expected_salary || 0,
            contact_preference: data.contact_preference || "email",
            resume: data.resume || null,
          };

          console.log(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫:",
            mockApplication
          );

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          if (Array.isArray(this.myApplications)) {
            this.myApplications.unshift(mockApplication);
          } else {
            this.myApplications = [mockApplication];
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          this._persistMockApplications(mockApplication);

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
          this._triggerApplicationCountRefresh(jobId);

          console.log(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:",
            mockApplication
          );

          // –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —á–∞—Ç–µ
          try {
            const chatStore = useChatStore();

            if (
              chatStore &&
              typeof chatStore.addMockConversation === "function"
            ) {
              console.log(
                "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"
              );

              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –±–µ—Å–µ–¥—ã
              const conversationId = `job_${jobId}_${Date.now()}`;
              const now = new Date().toISOString();

              // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–µ—Å–µ–¥—ã
              const conversation = {
                id: conversationId,
                job_id: jobId,
                job: {
                  id: jobId,
                  title: "Job #" + jobId,
                },
                unread: 1,
                unread_count: 1,
                last_message: data.message || "–Ø –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏",
                last_message_text:
                  data.message || "–Ø –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏",
                last_message_time: now,
                last_message_date: now,
                employer_name: "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å",
                jobseeker_name: userData.username,
                participants: [
                  { id: 1, username: "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", is_employer: true },
                  {
                    id: userData.user_id,
                    username: userData.username,
                    is_employer: false,
                  },
                ],
              };

              // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—é–º–µ
              const welcomeMessage = {
                id: Date.now(),
                conversation_id: conversationId,
                sender: 1, // –û—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
                sender_name: "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å",
                text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
                created_at: now,
                is_read: false,
              };

              // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
              const applicationMessage = {
                id: Date.now() + 1,
                conversation_id: conversationId,
                sender: userData.user_id, // –û—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
                sender_name: "–í—ã",
                text:
                  (data.message || "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞–∫–∞–Ω—Å–∏–∏") +
                  resumeInfo +
                  resumeLink,
                created_at: new Date(Date.now() + 1000).toISOString(),
                is_read: true,
              };

              // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ localStorage
              try {
                const storedJobs = JSON.parse(
                  localStorage.getItem("jobs") || "[]"
                );
                const jobData = storedJobs.find(
                  (j) => Number(j.id) === Number(jobId)
                );
                if (jobData && jobData.title) {
                  conversation.job.title = jobData.title;
                  console.log(
                    "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:",
                    jobData.title
                  );
                }

                // –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—É —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                chatStore.addMockConversation(conversation, [
                  welcomeMessage,
                  applicationMessage,
                ]);
              } catch (error) {
                console.error(
                  "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞:",
                  error
                );
                // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                chatStore.addMockConversation(conversation, [
                  welcomeMessage,
                  applicationMessage,
                ]);
              }

              console.log(
                "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω:",
                conversationId
              );
            }
          } catch (chatErr) {
            console.error(
              "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:",
              chatErr
            );
          }

          return mockApplication;
        }

        // –î–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º API
        const formattedData = {
          job: jobId,
          resume: data.resume,
          cover_letter: data.cover_letter || "",
          message: data.message || "",
          expected_salary: data.expected_salary || "",
          contact_preference: data.contact_preference || "email",
          start_chat: data.start_chat !== false,
        };

        console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", formattedData);

        // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const token = localStorage.getItem("token");
        const headers = token ? { Authorization: `Bearer ${token}` } : {};

        const response = await axios.post(
          "/api/jobs/applications/",
          formattedData,
          {
            headers,
            timeout: 15000,
          }
        );

        console.log("–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", response.data);

        if (Array.isArray(this.myApplications)) {
          this.myApplications.unshift(response.data);
        } else {
          this.myApplications = [response.data];
        }

        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫–∏ –≤ localStorage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
        if (import.meta.env.DEV) {
          this._persistMockApplications(response.data);
        }

        // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
        this._triggerApplicationCountRefresh(jobId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –≤ —á–∞—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
        try {
          const chatStore = useChatStore();
          await chatStore.fetchConversations(true);
          console.log("–°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏");
        } catch (chatError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥:", chatError);
        }

        return response.data;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ${jobId}:`, error);

        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è –ø–æ–ª–Ω—ã–º —Å–±–æ–µ–º - —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –∑–∞—è–≤–∫–∏
        if (import.meta.env.DEV) {
          console.log(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫"
          );
          alert(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫"
          );

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é –∏–º–∏—Ç–∞—Ü–∏—é –∑–∞—è–≤–∫–∏
          const mockApplication = {
            id: Date.now(),
            job: jobId,
            status: "pending",
            created_at: new Date().toISOString(),
            cover_letter: data.cover_letter || "",
            message:
              data.message || "Fallback application created after API error",
            resume: data.resume || null,
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          if (Array.isArray(this.myApplications)) {
            this.myApplications.unshift(mockApplication);
          } else {
            this.myApplications = [mockApplication];
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          this._persistMockApplications(mockApplication);

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
          this._triggerApplicationCountRefresh(jobId);

          console.log(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫:",
            mockApplication
          );
          return mockApplication;
        }

        // –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (error.response && error.response.data) {
          this.error = error.response.data;
        } else if (error.message) {
          this.error = { general: error.message };
        } else {
          this.error = { general: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏" };
        }

        throw error;
      } finally {
        this.loading = false;
      }
    },

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ localStorage
    _persistMockApplications(applicationData) {
      try {
        console.log(
          "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –≤ localStorage:",
          applicationData
        );

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!applicationData.job) {
          console.error(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–∞",
            applicationData
          );
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏
        let applications = [];
        try {
          const stored = localStorage.getItem("mockJobApplications");
          if (stored) {
            applications = JSON.parse(stored);
            console.log(
              `–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –ù–∞–π–¥–µ–Ω–æ ${applications.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ localStorage`
            );
          }
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:", err);
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
          applications = [];
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        let userData = {};
        try {
          const authStore = JSON.parse(localStorage.getItem("user")) || {};
          userData = {
            user_id: authStore.id || Date.now(),
            username: authStore.username || "user",
            role: authStore.role || "jobseeker",
          };
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
          userData = {
            user_id: Date.now(),
            username: "user",
            role: "jobseeker",
          };
        }

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
        const jobId =
          typeof applicationData.job === "object"
            ? applicationData.job.id
            : applicationData.job;

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        const completeApplicationData = {
          id: applicationData.id || Date.now(),
          job: jobId,
          user_id: userData.id || applicationData.user_id || Date.now(),
          username:
            userData.username || applicationData.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          status: applicationData.status || "pending",
          created_at: applicationData.created_at || new Date().toISOString(),
          ...applicationData, // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞—è–≤–∫–∞
        const existingIndex = applications.findIndex(
          (a) =>
            a.id === completeApplicationData.id ||
            (a.job == jobId && a.user_id == userData.user_id)
        );

        if (existingIndex >= 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
          applications[existingIndex] = {
            ...applications[existingIndex],
            ...completeApplicationData,
          };
          console.log(
            "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∫–ª–∏–∫ –≤ localStorage"
          );
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
          applications.push(completeApplicationData);
          console.log("–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –≤ localStorage");
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
        localStorage.setItem(
          "mockJobApplications",
          JSON.stringify(applications)
        );

        console.log(
          "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:",
          applications.length,
          "–æ—Ç–∫–ª–∏–∫–æ–≤ –≤—Å–µ–≥–æ"
        );

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π
        setTimeout(() => {
          this._triggerApplicationCountRefresh(jobId);
        }, 500);

        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π
          const { useJobsStore } = require("./jobs");
          const jobsStore = useJobsStore();
          if (jobsStore) {
            console.log(
              "–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π"
            );

            // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
            const jobsJson = localStorage.getItem("jobs");
            if (jobsJson) {
              try {
                let jobs = JSON.parse(jobsJson);

                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
                const targetJob = jobs.find((j) => j.id == jobId);
                if (targetJob) {
                  targetJob.applications_count =
                    (targetJob.applications_count || 0) + 1;
                  console.log(
                    `–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò: –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId} –¥–æ ${targetJob.applications_count}`
                  );

                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
                  localStorage.setItem("jobs", JSON.stringify(jobs));
                }
              } catch (err) {
                console.error(
                  "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤ localStorage:",
                  err
                );
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if (typeof jobsStore.refreshApplicationCounts === "function") {
              jobsStore.refreshApplicationCounts();
            }
          }
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", err);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞ –≤ localStorage:", err);
      }
    },

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
    _triggerApplicationCountRefresh(jobId) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫
        const { useJobsStore } = require("@/stores/jobs");
        const jobsStore = useJobsStore();
        if (
          jobsStore &&
          typeof jobsStore.refreshApplicationCounts === "function"
        ) {
          console.log("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤");
          jobsStore.refreshApplicationCounts();
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:", err);
      }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    async getApplicationsByJob(jobId) {
      if (!jobId) {
        console.error("getApplicationsByJob: –ù–µ —É–∫–∞–∑–∞–Ω ID –≤–∞–∫–∞–Ω—Å–∏–∏");
        return [];
      }

      console.log(
        `getApplicationsByJob: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`
      );

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
        await this.fetchJobApplications(jobId);
        const apiApplications = this.jobApplications[jobId] || [];

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ localStorage
        const storedApplications = this._getStoredApplicationsForJob(jobId);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const combinedApplications = this._mergeJobApplications(
          apiApplications,
          storedApplications
        );

        return combinedApplications;
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –≤ getApplicationsByJob –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}:`,
          error
        );

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ localStorage
        return this._getStoredApplicationsForJob(jobId);
      }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ localStorage –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    _getStoredApplicationsForJob(jobId) {
      try {
        const storedJson = localStorage.getItem("mockJobApplications");
        if (!storedJson) return [];

        const storedApps = JSON.parse(storedJson);
        return storedApps.filter(
          (app) => app.job == jobId || (app.job && app.job.id == jobId)
        );
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:", err);
        return [];
      }
    },

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏–∑ API –∏ localStorage –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
    _mergeJobApplications(apiApps, storedApps) {
      const mergedApps = [...apiApps];
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ localStorage
      for (let i = 0; i < mergedApps.length; i++) {
        const app = mergedApps[i];
        const storedApp = storedApps.find(
          (sa) =>
            String(sa.id) === String(app.id) ||
            (String(sa.job) === String(app.job) && sa.user_id === app.user_id)
        );

        if (storedApp && storedApp.status) {
          app.status = storedApp.status;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ localStorage
      for (const storedApp of storedApps) {
        const exists = mergedApps.some(
          (app) =>
            String(app.id) === String(storedApp.id) ||
            (String(app.job) === String(storedApp.job) &&
              app.user_id === storedApp.user_id)
        );

        if (!exists) {
          mergedApps.push(storedApp);
        }
      }

      return mergedApps;
    },

    async updateApplicationStatus(applicationId, status) {
      this.loading = true;
      this.error = null;
      try {
        const response = await axios.patch(
          `/api/jobs/applications/${applicationId}/`,
          {
            status: status,
          }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–∞—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        Object.keys(this.jobApplications).forEach((jobId) => {
          const index = this.jobApplications[jobId].findIndex(
            (app) => app.id === applicationId
          );
          if (index !== -1) {
            this.jobApplications[jobId][index] = response.data;
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–æ–∏—Ö –∑–∞—è–≤–∫–∞—Ö, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const myIndex = this.myApplications.findIndex(
          (app) => app.id === applicationId
        );
        if (myIndex !== -1) {
          this.myApplications[myIndex] = response.data;
        }

        return response.data;
      } catch (error) {
        this.error =
          error.response?.data || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞";
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞:", error);
        throw error;
      } finally {
        this.loading = false;
      }
    },

    async withdrawApplication(applicationId) {
      this.loading = true;
      this.error = null;
      try {
        await axios.delete(`/api/jobs/applications/${applicationId}/`);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫
        this.myApplications = this.myApplications.filter(
          (app) => app.id !== applicationId
        );

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        Object.keys(this.jobApplications).forEach((jobId) => {
          this.jobApplications[jobId] = this.jobApplications[jobId].filter(
            (app) => app.id !== applicationId
          );
        });

        return true;
      } catch (error) {
        this.error = error.response?.data || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫";
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –æ—Ç–∫–ª–∏–∫–∞:", error);
        throw error;
      } finally {
        this.loading = false;
      }
    },

    async startChatWithEmployer(jobId) {
      try {
        // –ò—â–µ–º –∑–∞—è–≤–∫—É –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        const application = this.myApplications.find(
          (app) => app.job.id === Number(jobId)
        );
        let message = "";

        if (application) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
          message =
            application.message ||
            application.cover_letter ||
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Ö–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏.";
        } else {
          message =
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ö–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏.";
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
        let jobData = null;
        try {
          const jobResponse = await axios.get(`/api/jobs/${jobId}/`);
          jobData = jobResponse.data;
        } catch (err) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`, err);
        }

        const employerId = jobData?.employer?.id || jobData?.user?.id || null;

        const response = await axios.post("/api/jobs/messages/start_chat/", {
          job_id: jobId,
          employer_id: employerId,
          initial_message: message,
        });

        return response.data;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}:`, error);
        throw error;
      }
    },

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫
    fixApplicationStorage() {
      if (!import.meta.env.DEV) {
        return;
      }

      try {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ç–∫–ª–∏–∫–æ–≤...");
        const stored = localStorage.getItem("mockJobApplications");
        if (!stored) {
          console.log("–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∏.");
          return;
        }

        let applications = JSON.parse(stored);
        if (!Array.isArray(applications) || applications.length === 0) {
          console.log("–ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");
          return;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–∞–º–∏
        let modified = false;
        applications = applications.map((app) => {
          // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –≤–∞–∫–∞–Ω—Å–∏–∏ - —á–∏—Å–ª–æ
          if (typeof app.job === "string") {
            app.job = parseInt(app.job, 10) || app.job;
            modified = true;
          }

          // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (!app.user_id) {
            app.user_id = Date.now();
            modified = true;
          }

          return app;
        });

        if (modified) {
          console.log(
            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∫–ª–∏–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
          );
          localStorage.setItem(
            "mockJobApplications",
            JSON.stringify(applications)
          );
        } else {
          console.log("–ü—Ä–æ–±–ª–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        this._triggerApplicationCountRefresh();
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:", err);
      }
    },
  },
});
